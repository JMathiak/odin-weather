(()=>{"use strict";const e=config.API_KEY,t={units:"us",address:"",days:[],currentFeel:0,currentHumidity:0,currentTemp:0,currentWind:0};async function n(n,d){try{const r=await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${n}/next7days?unitGroup=${d}&include=days,hours&key=${e}&contentType=json`,{mode:"cors"}),i=await r.json();let c=await async function(e){let n=[];t.currentTemp=Math.round(e.days[0].hours[0].temp),t.currentFeel=Math.round(e.days[0].hours[0].feelslike),t.currentHumidity=Math.round(e.days[0].hours[0].humidity),t.currentWind=Math.round(e.days[0].hours[0].windspeed);for(let t=0;t<5;t++){let d={location:e.address,date:e.days[t].datetime,low:e.days[t].tempmin,high:e.days[t].tempmax,hourly:e.days[t].hours,condition:e.days[t].conditions,precip:e.days[t].precipprob,icon:e.days[t].icon};n.push(d)}return n}(i);return t.address=i.resolvedAddress,document.getElementById("locationInput").value="",c}catch{alert("No Location Found, Try Again"),document.getElementById("locationInput").value=""}}async function d(){let e=document.getElementById("card-holder"),d="",r="";for(e.hasChildNodes()?(d=document.getElementById("locationInput").value,r=t.units):(d="dallas",r="us"),t.days.length>0&&(t.days=[]),t.days=await n(d,r);e.firstChild;)e.removeChild(e.firstChild);let i=document.getElementById("location");i.textContent="Showing Weather for: "+t.address;let c=document.getElementById("switch-units");"us"==t.units?(i.innerText+="(°F)",c.innerText="Switch to °C"):(i.innerText+="(°C)",c.innerText="Switch to °F"),t.days.forEach((t=>{let n=document.createElement("div");n.className="card";let d=function(e){let t=e.split("-");return["January","February","March","April","May","June","July","August","September","October","November","December"][t[1]-1]+" "+parseInt(t[2],10)}(t.date),r=document.createElement("div");r.className="date",r.innerText=d,n.appendChild(r);let i=document.createElement("div");i.className="icon";let c=document.createElement("img");n.appendChild(i),i.appendChild(c),c.src="./icons/"+t.icon+".svg";let s=document.createElement("div");s.className="temp",s.textContent="High: "+Math.round(t.high)+"° Low: "+Math.round(t.low)+"°",n.appendChild(s);let a=document.createElement("div");a.innerText=t.condition,a.className="condition",n.appendChild(a);let o=document.createElement("div");o.innerText="Precipitation: "+Math.round(t.precip/10)+"%",o.className="precip",n.appendChild(o),e.appendChild(n)})),document.getElementById("container").classList.add(t.days[0].icon),document.getElementsByClassName("card")[0].getElementsByClassName("temp"),document.getElementById("current-temp").innerText=t.currentTemp+"°",document.getElementById("current-feels").innerText=t.currentFeel+"°",document.getElementById("current-humidity").innerText=t.currentHumidity+"%",document.getElementById("current-wind").innerText=t.currentWind+" mph"}async function r(){"us"==t.units?t.units="metric":t.units="us",t.days=await n(t.address,t.units);let e=document.getElementById("location");e.textContent="Showing Weather for: "+t.address;let d=document.getElementById("switch-units"),r=document.getElementById("current-wind");"us"==t.units?(e.innerText+="(°F)",d.innerText="Switch to °C",r.innerText=t.currentWind+" mph"):(e.innerText+="(°C)",d.innerText="Switch to °F",r.innerText=t.currentWind+" km/h");let i=document.getElementsByClassName("card");for(let e=0;e<t.days.length;e++)i[e].getElementsByClassName("temp")[0].innerText="High: "+Math.round(t.days[e].high)+"° Low: "+Math.round(t.days[e].low)+"°";document.getElementById("current-temp").innerText=t.currentTemp+"°",document.getElementById("current-feels").innerText=t.currentFeel+"°"}window.onload=function(){document.getElementById("search-for-weather").addEventListener("click",d),document.getElementById("switch-units").addEventListener("click",r),d()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,