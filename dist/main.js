(()=>{"use strict";const e=config.API_KEY,t={units:"us",address:"",days:[],currentFeel:0,currentHumidity:0,currentTemp:0,currentWind:0};async function n(e){console.log(e);let n=[];t.currentTemp=Math.round(e.days[0].hours[0].temp),t.currentFeel=Math.round(e.days[0].hours[0].feelslike),t.currentHumidity=Math.round(e.days[0].hours[0].humidity),t.currentWind=Math.round(e.days[0].hours[0].windspeed);for(let t=0;t<5;t++){let o={location:e.address,date:e.days[t].datetime,low:e.days[t].tempmin,high:e.days[t].tempmax,hourly:e.days[t].hours,condition:e.days[t].conditions,precip:e.days[t].precipprob,icon:e.days[t].icon};n.push(o)}return n}async function o(){let o=document.getElementById("card-holder"),r="",i="";for(o.hasChildNodes()?(r=document.getElementById("locationInput").value,i=t.units):(r="dallas",i="us"),t.days.length>0&&(t.days=[]),t.days=await async function(o,r){console.log(o),console.log(r);try{const i=await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${o}/next7days?unitGroup=${r}&include=days,hours&key=${e}&contentType=json`,{mode:"cors"}),d=await i.json();let s=await n(d);return t.address=d.resolvedAddress,document.getElementById("locationInput").value="",s}catch{alert("No Location Found, Try Again"),document.getElementById("locationInput").value=""}}(r,i);o.firstChild;)o.removeChild(o.firstChild);let d=document.getElementById("location");d.textContent="Showing Weather for: "+t.address;let s=document.getElementById("switch-units");"us"==t.units?(d.innerText+="(°F)",s.innerText="Switch to °C"):(d.innerText+="(°C)",s.innerText="Switch to °F"),t.days.forEach((e=>{let t=document.createElement("div");t.className="card";let n=function(e){let t=e.split("-");return["January","February","March","April","May","June","July","August","September","October","November","December"][t[1]-1]+" "+parseInt(t[2],10)}(e.date),r=document.createElement("div");r.className="date",r.innerText=n,t.appendChild(r);let i=document.createElement("div");i.className="icon";let d=document.createElement("img");t.appendChild(i),i.appendChild(d),d.src="../icons/"+e.icon+".svg";let s=document.createElement("div");s.className="temp",s.textContent="High: "+Math.round(e.high)+"° Low: "+Math.round(e.low)+"°",t.appendChild(s);let c=document.createElement("div");c.innerText=e.condition,c.className="condition",t.appendChild(c);let a=document.createElement("div");a.innerText="Precipitation: "+Math.round(e.precip/10)+"%",a.className="precip",t.appendChild(a),o.appendChild(t)})),document.getElementById("container").classList.add(t.days[0].icon);let c=document.getElementsByClassName("card");console.log(c);let a=c[0].getElementsByClassName("temp");console.log(a[0].innerText),document.getElementById("current-temp").innerText=t.currentTemp+"°",document.getElementById("current-feels").innerText=t.currentFeel+"°",document.getElementById("current-humidity").innerText=t.currentHumidity+"%",document.getElementById("current-wind").innerText=t.currentWind+"mph"}async function r(){"us"==t.units?t.units="metric":t.units="us",console.log(document.getElementById("switch-units").innerText),t.days=await async function(){let o=t.address;console.log(o);let r=t.units;try{const t=await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${o}/next7days?unitGroup=${r}&include=days,hours&key=${e}&contentType=json`,{mode:"cors"}),i=await t.json();let d=await n(i);return document.getElementById("locationInput").value="",d}catch{alert("No Location Found, Try Again"),console.log(o),document.getElementById("locationInput").value=""}}();let o=document.getElementById("location");o.textContent="Showing Weather for: "+t.address;let r=document.getElementById("switch-units"),i=document.getElementById("current-wind");"us"==t.units?(o.innerText+="(°F)",r.innerText="Switch to °C",i.innerText=t.currentWind+"mph"):(o.innerText+="(°C)",r.innerText="Switch to °F",i.innerText=t.currentWind+"km/h");let d=document.getElementsByClassName("card");for(let e=0;e<t.days.length;e++)d[e].getElementsByClassName("temp")[0].innerText="High: "+Math.round(t.days[e].high)+"° Low: "+Math.round(t.days[e].low)+"°";document.getElementById("current-temp").innerText=t.currentTemp+"°",document.getElementById("current-feels").innerText=t.currentFeel+"°"}window.onload=function(){document.getElementById("search-for-weather").addEventListener("click",o),document.getElementById("switch-units").addEventListener("click",r),o()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,