(()=>{"use strict";const e=config.API_KEY,t={units:"us",address:"",days:[]};async function n(e){console.log(e);let t=[];for(let n=0;n<5;n++){let s={location:e.address,date:e.days[n].datetime,low:e.days[n].tempmin,high:e.days[n].tempmax,hourly:e.days[n].hours,condition:e.days[n].conditions,icon:e.days[n].icon};t.push(s)}return t}document.getElementById("search-for-weather").addEventListener("click",(async function(){t.days.length>0&&(t.days=[]),t.days=await async function(){let s=document.getElementById("locationInput").value,i=t.units;console.log(i);try{const a=await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${s}/next7days?unitGroup=${i}&include=days,hours&key=${e}&contentType=json`,{mode:"cors"}),o=await a.json();let d=await n(o);return t.address=o.resolvedAddress,document.getElementById("locationInput").value="",d}catch{alert("No Location Found, Try Again"),document.getElementById("locationInput").value=""}}();let s=document.getElementById("weather");for(;s.firstChild;)s.removeChild(s.firstChild);document.getElementById("location").textContent=t.address;let i=document.getElementById("unit-display"),a=document.getElementById("switch-units");"us"==t.units?(i.innerText="Units: Farenheit",a.innerText="Switch to °C"):(i.innerText="Units: Celsius",a.innerText="Switch to °F"),t.days.forEach((e=>{let t=document.createElement("div");t.className="card";let n=function(e){let t=e.split("-");return["January","February","March","April","May","June","July","August","September","October","November","December"][t[1]-1]+" "+parseInt(t[2],10)}(e.date),i=document.createElement("div");i.className="date",i.innerText=n,t.appendChild(i);let a=document.createElement("div");a.className="icon";let o=document.createElement("img");t.appendChild(a),a.appendChild(o),o.src="../icons/"+e.icon+".svg";let d=document.createElement("div");d.className="temp",d.textContent="High: "+Math.round(e.high)+"° Low: "+Math.round(e.low)+"°",t.appendChild(d);let c=document.createElement("div");c.innerText=e.condition,c.className="condition",t.appendChild(c),s.appendChild(t)})),document.getElementById("container").classList.add(t.days[0].icon);let o=document.getElementsByClassName("card");console.log(o);let d=o[0].getElementsByClassName("temp");console.log(d[0].innerText)})),document.getElementById("switch-units").addEventListener("click",(async function(){"us"==t.units?t.units="metric":t.units="us",t.days=await async function(){let s=t.address;console.log(s);let i=t.units;try{const t=await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${s}/next7days?unitGroup=${i}&include=days,hours&key=${e}&contentType=json`,{mode:"cors"}),a=await t.json();let o=await n(a);return document.getElementById("locationInput").value="",o}catch{alert("No Location Found, Try Again"),console.log(s),document.getElementById("locationInput").value=""}}();let s=document.getElementById("unit-display"),i=document.getElementById("switch-units");"us"==t.units?(s.innerText="Units: Farenheit",i.innerText="Switch to °C"):(s.innerText="Units: Celsius",i.innerText="Switch to °F");let a=document.getElementsByClassName("card");for(let e=0;e<t.days.length;e++)a[e].getElementsByClassName("temp")[0].innerText="High: "+Math.round(t.days[e].high)+"° Low: "+Math.round(t.days[e].low)+"°"}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,