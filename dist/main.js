(()=>{"use strict";const e=config.API_KEY,t={units:"us",address:"",days:[]};async function n(e){console.log(e);let t=[];for(let n=0;n<5;n++){let o={location:e.address,date:e.days[n].datetime,low:e.days[n].tempmin,high:e.days[n].tempmax,hourly:e.days[n].hours,condition:e.days[n].conditions,precip:e.days[n].precipprob,icon:e.days[n].icon};t.push(o)}return t}async function o(){let o=document.getElementById("card-holder"),s="",a="";for(o.hasChildNodes()?(s=document.getElementById("locationInput").value,a=t.units):(s="dallas",a="us"),t.days.length>0&&(t.days=[]),t.days=await async function(o,s){console.log(o),console.log(s);try{const a=await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${o}/next7days?unitGroup=${s}&include=days,hours&key=${e}&contentType=json`,{mode:"cors"}),i=await a.json();let c=await n(i);return t.address=i.resolvedAddress,document.getElementById("locationInput").value="",c}catch{alert("No Location Found, Try Again"),document.getElementById("locationInput").value=""}}(s,a);o.firstChild;)o.removeChild(o.firstChild);let i=document.getElementById("location");i.textContent="Showing Weather for: "+t.address;let c=document.getElementById("switch-units");"us"==t.units?(i.innerText+="(°F)",c.innerText="Switch to °C"):(i.innerText+="(°C)",c.innerText="Switch to °F"),t.days.forEach((e=>{let t=document.createElement("div");t.className="card";let n=function(e){let t=e.split("-");return["January","February","March","April","May","June","July","August","September","October","November","December"][t[1]-1]+" "+parseInt(t[2],10)}(e.date),s=document.createElement("div");s.className="date",s.innerText=n,t.appendChild(s);let a=document.createElement("div");a.className="icon";let i=document.createElement("img");t.appendChild(a),a.appendChild(i),i.src="../icons/"+e.icon+".svg";let c=document.createElement("div");c.className="temp",c.textContent="High: "+Math.round(e.high)+"° Low: "+Math.round(e.low)+"°",t.appendChild(c);let d=document.createElement("div");d.innerText=e.condition,d.className="condition",t.appendChild(d);let l=document.createElement("div");l.innerText="Precipitation: "+Math.round(e.precip/10)+"%",l.className="precip",t.appendChild(l),o.appendChild(t)})),document.getElementById("container").classList.add(t.days[0].icon);let d=document.getElementsByClassName("card");console.log(d);let l=d[0].getElementsByClassName("temp");console.log(l[0].innerText)}async function s(){"us"==t.units?t.units="metric":t.units="us",console.log(document.getElementById("switch-units").innerText),t.days=await async function(){let o=t.address;console.log(o);let s=t.units;try{const t=await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${o}/next7days?unitGroup=${s}&include=days,hours&key=${e}&contentType=json`,{mode:"cors"}),a=await t.json();let i=await n(a);return document.getElementById("locationInput").value="",i}catch{alert("No Location Found, Try Again"),console.log(o),document.getElementById("locationInput").value=""}}();let o=document.getElementById("location");o.textContent="Showing Weather for: "+t.address;let s=document.getElementById("switch-units");"us"==t.units?(o.innerText+="(°F)",s.innerText="Switch to °C"):(o.innerText+="(°C)",s.innerText="Switch to °F");let a=document.getElementsByClassName("card");for(let e=0;e<t.days.length;e++)a[e].getElementsByClassName("temp")[0].innerText="High: "+Math.round(t.days[e].high)+"° Low: "+Math.round(t.days[e].low)+"°"}window.onload=function(){document.getElementById("search-for-weather").addEventListener("click",o),document.getElementById("switch-units").addEventListener("click",s),o()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,